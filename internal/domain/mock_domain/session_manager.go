// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/waliqueiroz/mystery-gifter-api/internal/domain (interfaces: SessionManager)
//
// Generated by this command:
//
//	mockgen -destination mock_domain/session_manager.go . SessionManager
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
	isgomock struct{}
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionManager) Create(userID string, expiresIn int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, expiresIn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionManagerMockRecorder) Create(userID, expiresIn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionManager)(nil).Create), userID, expiresIn)
}

// ExtractUserID mocks base method.
func (m *MockSessionManager) ExtractUserID(token any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractUserID", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractUserID indicates an expected call of ExtractUserID.
func (mr *MockSessionManagerMockRecorder) ExtractUserID(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractUserID", reflect.TypeOf((*MockSessionManager)(nil).ExtractUserID), token)
}

// GetTokenType mocks base method.
func (m *MockSessionManager) GetTokenType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTokenType indicates an expected call of GetTokenType.
func (mr *MockSessionManagerMockRecorder) GetTokenType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenType", reflect.TypeOf((*MockSessionManager)(nil).GetTokenType))
}
