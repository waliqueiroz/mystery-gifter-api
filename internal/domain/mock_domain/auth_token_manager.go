// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/waliqueiroz/mystery-gifter-api/internal/domain (interfaces: AuthTokenManager)
//
// Generated by this command:
//
//	mockgen -destination mock_domain/auth_token_manager.go . AuthTokenManager
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthTokenManager is a mock of AuthTokenManager interface.
type MockAuthTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthTokenManagerMockRecorder
	isgomock struct{}
}

// MockAuthTokenManagerMockRecorder is the mock recorder for MockAuthTokenManager.
type MockAuthTokenManagerMockRecorder struct {
	mock *MockAuthTokenManager
}

// NewMockAuthTokenManager creates a new mock instance.
func NewMockAuthTokenManager(ctrl *gomock.Controller) *MockAuthTokenManager {
	mock := &MockAuthTokenManager{ctrl: ctrl}
	mock.recorder = &MockAuthTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthTokenManager) EXPECT() *MockAuthTokenManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthTokenManager) Create(userID string, expiresIn int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, expiresIn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthTokenManagerMockRecorder) Create(userID, expiresIn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthTokenManager)(nil).Create), userID, expiresIn)
}

// GetAuthUserID mocks base method.
func (m *MockAuthTokenManager) GetAuthUserID(token any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthUserID", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthUserID indicates an expected call of GetAuthUserID.
func (mr *MockAuthTokenManagerMockRecorder) GetAuthUserID(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthUserID", reflect.TypeOf((*MockAuthTokenManager)(nil).GetAuthUserID), token)
}

// GetTokenType mocks base method.
func (m *MockAuthTokenManager) GetTokenType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTokenType indicates an expected call of GetTokenType.
func (mr *MockAuthTokenManagerMockRecorder) GetTokenType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenType", reflect.TypeOf((*MockAuthTokenManager)(nil).GetTokenType))
}
