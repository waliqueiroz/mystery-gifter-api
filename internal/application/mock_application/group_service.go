// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/waliqueiroz/mystery-gifter-api/internal/application (interfaces: GroupService)
//
// Generated by this command:
//
//	mockgen -destination mock_application/group_service.go . GroupService
//

// Package mock_application is a generated GoMock package.
package mock_application

import (
	context "context"
	reflect "reflect"

	domain "github.com/waliqueiroz/mystery-gifter-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupService is a mock of GroupService interface.
type MockGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupServiceMockRecorder
	isgomock struct{}
}

// MockGroupServiceMockRecorder is the mock recorder for MockGroupService.
type MockGroupServiceMockRecorder struct {
	mock *MockGroupService
}

// NewMockGroupService creates a new mock instance.
func NewMockGroupService(ctrl *gomock.Controller) *MockGroupService {
	mock := &MockGroupService{ctrl: ctrl}
	mock.recorder = &MockGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupService) EXPECT() *MockGroupServiceMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockGroupService) AddUser(ctx context.Context, groupID, requesterID, targetUserID string) (*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, groupID, requesterID, targetUserID)
	ret0, _ := ret[0].(*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockGroupServiceMockRecorder) AddUser(ctx, groupID, requesterID, targetUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockGroupService)(nil).AddUser), ctx, groupID, requesterID, targetUserID)
}

// Create mocks base method.
func (m *MockGroupService) Create(ctx context.Context, name, ownerID string) (*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, ownerID)
	ret0, _ := ret[0].(*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupServiceMockRecorder) Create(ctx, name, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupService)(nil).Create), ctx, name, ownerID)
}

// GenerateMatches mocks base method.
func (m *MockGroupService) GenerateMatches(ctx context.Context, groupID, requesterID string) (*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMatches", ctx, groupID, requesterID)
	ret0, _ := ret[0].(*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMatches indicates an expected call of GenerateMatches.
func (mr *MockGroupServiceMockRecorder) GenerateMatches(ctx, groupID, requesterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMatches", reflect.TypeOf((*MockGroupService)(nil).GenerateMatches), ctx, groupID, requesterID)
}

// GetByID mocks base method.
func (m *MockGroupService) GetByID(ctx context.Context, groupID string) (*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, groupID)
	ret0, _ := ret[0].(*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGroupServiceMockRecorder) GetByID(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGroupService)(nil).GetByID), ctx, groupID)
}

// GetUserMatch mocks base method.
func (m *MockGroupService) GetUserMatch(ctx context.Context, groupID, requesterID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMatch", ctx, groupID, requesterID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMatch indicates an expected call of GetUserMatch.
func (mr *MockGroupServiceMockRecorder) GetUserMatch(ctx, groupID, requesterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMatch", reflect.TypeOf((*MockGroupService)(nil).GetUserMatch), ctx, groupID, requesterID)
}

// RemoveUser mocks base method.
func (m *MockGroupService) RemoveUser(ctx context.Context, groupID, requesterID, targetUserID string) (*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", ctx, groupID, requesterID, targetUserID)
	ret0, _ := ret[0].(*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockGroupServiceMockRecorder) RemoveUser(ctx, groupID, requesterID, targetUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockGroupService)(nil).RemoveUser), ctx, groupID, requesterID, targetUserID)
}
