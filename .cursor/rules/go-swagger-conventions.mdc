---
description: Convenções para documentação de endpoints com go-swagger no projeto Mystery Gifter API
globs:
alwaysApply: false
---

# Convenções de Documentação Swagger com Go

Este documento descreve as convenções estabelecidas no projeto Mystery Gifter API para documentação de endpoints usando go-swagger.

## Estrutura de Arquivos

### Organização da Documentação
- **Arquivo principal**: [docs/swagger.go](mdc:docs/swagger.go) - Contém metadados globais da API
- **Especificação gerada**: [docs/specs/swagger.yaml](mdc:docs/specs/swagger.yaml) - Arquivo YAML gerado automaticamente
- **Rotas documentadas**: [internal/infra/entrypoint/routes.go](mdc:internal/infra/entrypoint/routes.go) - Contém todas as anotações de endpoints
- **DTOs**: [internal/infra/entrypoint/rest/](mdc:internal/infra/entrypoint/rest/) - Contém todos os Data Transfer Objects

## Metadados Globais da API

### Arquivo docs/swagger.go
```go
// Mystery Gifter API
//
// - API for managing secret santa groups and gift exchanges
//
// Version: 1.0.0
// Title: Mystery Gifter API
// Host: localhost:8080
// BasePath: /api/v1
// Schemes: http, https
//
// Consumes:
// - application/json
//
// Produces:
// - application/json
//
// swagger:meta
package docs

//go:generate go run github.com/go-swagger/go-swagger/cmd/swagger generate spec -o ./specs/swagger.yaml --scan-models
```

## Convenções de DTOs

### Estrutura Padrão de DTOs
Todos os DTOs devem seguir esta estrutura:

```go
// NomeDTO represents a description of what this DTO represents
// swagger:model NomeDTO
type NomeDTO struct {
    // Field description
    // required: true/false
    // example: example_value
    // enum: VAL1,VAL2,VAL3 (quando aplicável)
    FieldName string `json:"field_name" validate:"validation_rules"`
}

func (d *NomeDTO) Validate() error {
    if errs := validator.Validate(d); len(errs) > 0 {
        return domain.NewValidationError(errs)
    }
    return nil
}
```

### Convenções de Campos

#### Campos Obrigatórios
```go
// Field description
// required: true
// example: example_value
FieldName string `json:"field_name" validate:"required"`
```

#### Campos Opcionais
```go
// Field description
// example: example_value
FieldName string `json:"field_name"`
```

#### Campos com Enumeração
```go
// Field description
// required: true
// example: OPEN
// enum: OPEN,MATCHED,ARCHIVED
Status string `json:"status" validate:"required,oneof=OPEN MATCHED ARCHIVED"`
```

#### Campos com Validação Específica
```go
// User's password
// required: true
// minLength: 8
// example: mypassword123
Password string `json:"password" validate:"required,min=8,eqfield=PasswordConfirm"`
```

#### Campos de Data/Hora
```go
// When the user was created
// required: true
// example: 2023-12-01T10:00:00Z
CreatedAt time.Time `json:"created_at" validate:"required"`
```

#### Campos UUID
```go
// Unique identifier for the user
// required: true
// example: 01234567-89ab-cdef-0123-456789abcdef
ID string `json:"id" validate:"required,uuid"`
```

### DTOs de Filtros e Paginação

#### Estrutura de Filtros
```go
// FiltersDTO represents filters for searching entities
// swagger:model FiltersDTO
type FiltersDTO struct {
    // Filter by field name
    // example: example_value
    FieldName string `query:"field_name" json:"field_name"`
    
    // Maximum number of results to return
    // example: 10
    Limit int `query:"limit" json:"limit"`
    
    // Number of results to skip
    // example: 0
    Offset int `query:"offset" json:"offset"`
    
    // Sort direction (ASC or DESC)
    // enum: ASC,DESC
    // example: ASC
    SortDirection string `query:"sort_direction" json:"sort_direction" validate:"omitempty,oneof=ASC DESC"`
    
    // Field to sort by
    // enum: field1,field2,field3
    // example: field1
    SortBy string `query:"sort_by" json:"sort_by" validate:"omitempty,oneof=field1 field2 field3"`
}
```

#### Estrutura de Resultados Paginados
```go
// SearchResultDTO represents a paginated search result
// swagger:model SearchResultDTO
type SearchResultDTO struct {
    // List of results
    // required: true
    Result []EntityDTO `json:"result" validate:"required"`
    
    // Pagination information
    // required: true
    Paging PagingDTO `json:"paging" validate:"required"`
}

// PagingDTO represents pagination information
// swagger:model PagingDTO
type PagingDTO struct {
    // Total number of results
    // example: 100
    Total int `json:"total" validate:"omitempty,min=0"`
    
    // Maximum number of results per page
    // required: true
    // example: 10
    Limit int `json:"limit" validate:"required,min=1"`
    
    // Number of results to skip
    // example: 0
    Offset int `json:"offset" validate:"omitempty,min=0"`
}
```

## Convenções de Endpoints

### Estrutura de Documentação de Endpoint
```go
// swagger:operation METHOD /api/v1/endpoint OperationName
//
// Summary of the operation
//
// Detailed description of what this endpoint does.
// Additional context about requirements or behavior.
//
// ---
// tags:
// - tag_name
// produces:
// - application/json
// consumes:
// - application/json (quando aplicável)
// security:
// - Bearer: [] (quando aplicável)
// parameters:
// - name: paramName
//   in: path/query/body
//   description: Parameter description
//   required: true/false
//   type: string/integer/object
//   schema:
//     "$ref": '#/definitions/DTOType' (para body parameters)
// responses:
//   '200':
//     description: Success description
//     schema:
//       "$ref": '#/definitions/ResponseDTO'
//   '400':
//     description: Bad request description
//   '401':
//     description: Authentication required
//   '403':
//     description: Insufficient permissions
//   '404':
//     description: Resource not found
//   '409':
//     description: Conflict description
//   '422':
//     description: Invalid request body
```

### Convenções de Tags
- **auth**: Endpoints de autenticação
- **users**: Endpoints relacionados a usuários
- **groups**: Endpoints relacionados a grupos

### Convenções de Códigos de Resposta
- **200**: Sucesso (operações GET, PUT, DELETE)
- **201**: Criado com sucesso (operações POST de criação)
- **400**: Dados inválidos
- **401**: Autenticação necessária
- **403**: Permissões insuficientes
- **404**: Recurso não encontrado
- **409**: Conflito (ex: recurso já existe)
- **422**: Corpo da requisição inválido

### Convenções de Parâmetros

#### Parâmetros de Path
```go
// - name: resourceID
//   in: path
//   description: Unique resource identifier
//   required: true
//   type: string
```

#### Parâmetros de Query

##### Método Individual (OBRIGATÓRIO para go-swagger)
```go
// - name: fieldName
//   in: query
//   description: Filter by field name
//   required: false
//   type: string
```

**⚠️ IMPORTANTE**: O go-swagger com OpenAPI 2.0 **NÃO consegue renderizar corretamente** query parameters quando usamos schema reference. Por isso, devemos sempre definir cada parâmetro individualmente.

**Por que não usar schema para query parameters:**
- ❌ Swagger UI não renderiza os campos corretamente
- ❌ Parâmetros não aparecem na interface
- ❌ Experiência do usuário comprometida
- ❌ Limitação do go-swagger com OpenAPI 2.0

#### Parâmetros de Body
```go
// - name: CreateResourceDTO
//   in: body
//   description: Resource information for creation
//   required: true
//   schema:
//     "$ref": '#/definitions/CreateResourceDTO'
```

## Geração e Manutenção

### Comandos do Makefile
```bash
# Gerar documentação
make generate-docs

# Servir documentação localmente
make serve-docs

# Gerar e servir
make docs
```

### Processo de Atualização
1. **Modificar DTOs**: Atualizar structs e comentários swagger
2. **Modificar Endpoints**: Atualizar anotações em [routes.go](mdc:internal/infra/entrypoint/routes.go)
3. **Regenerar**: Executar `make generate-docs`
4. **Verificar**: Acessar `http://localhost:8081` com `make serve-docs`

## Exemplos de Implementação

### DTO Completo
```go
// CreateUserDTO represents the data needed to create a new user
// swagger:model CreateUserDTO
type CreateUserDTO struct {
    // User's first name
    // required: true
    // example: João
    Name string `json:"name" validate:"required"`

    // User's last name
    // required: true
    // example: Silva
    Surname string `json:"surname" validate:"required"`

    // User's email address
    // required: true
    // example: joao.silva@example.com
    Email string `json:"email" validate:"required,email"`

    // User's password
    // required: true
    // minLength: 8
    // example: mypassword123
    Password string `json:"password" validate:"required,min=8,eqfield=PasswordConfirm"`

    // Password confirmation (must match password)
    // required: true
    // example: mypassword123
    PasswordConfirm string `json:"password_confirm" validate:"required"`
}
```

### Endpoint Completo (POST com Body)
```go
// swagger:operation POST /api/v1/users CreateUser
//
// Create a new user
//
// This endpoint creates a new user account with the provided information.
//
// ---
// tags:
// - users
// produces:
// - application/json
// consumes:
// - application/json
// parameters:
// - name: CreateUserDTO
//   in: body
//   description: User information for account creation
//   required: true
//   schema:
//     "$ref": '#/definitions/CreateUserDTO'
// responses:
//   '201':
//     description: User created successfully
//     schema:
//       "$ref": '#/definitions/UserDTO'
//   '400':
//     description: Invalid user data
//   '409':
//     description: User already exists
//   '422':
//     description: Invalid request body
```

### Endpoint de Busca (GET com Query Schema)
```go
// swagger:operation GET /api/v1/groups SearchGroups
//
// Search groups with filters and pagination
//
// This endpoint searches for groups based on filters and returns paginated results.
// Requires authentication.
//
// ---
// tags:
// - groups
// produces:
// - application/json
// security:
// - Bearer: []
// parameters:
// - name: GroupFiltersDTO
//   in: query
//   description: Filters for searching groups
//   required: false
//   schema:
//     "$ref": '#/definitions/GroupFiltersDTO'
// responses:
//   '200':
//     description: Search completed successfully
//     schema:
//       "$ref": '#/definitions/GroupSearchResultDTO'
//   '400':
//     description: Invalid search parameters
//   '401':
//     description: Authentication required
//   '422':
//     description: Invalid query parameters
```

## Boas Práticas

### ✅ Recomendado
- Sempre incluir `swagger:model` em DTOs
- Documentar todos os campos com descrição, exemplo e validação
- Usar enums para campos com valores limitados
- Incluir códigos de resposta apropriados
- Usar tags consistentes para agrupar endpoints
- Validar DTOs com método `Validate()`
- **Definir query parameters individualmente** para garantir renderização correta no Swagger UI
- Manter consistência entre DTOs de filtros e documentação de endpoints

### ❌ Evitar
- Campos sem documentação
- Exemplos irreais ou inconsistentes
- Códigos de resposta incorretos
- Falta de validação em DTOs
- Documentação desatualizada após mudanças no código
- Misturar convenções de nomenclatura
- **Usar schema para query parameters** (não funciona com go-swagger + OpenAPI 2.0)
- Duplicar informações entre DTOs e documentação de endpoints

### 🔄 Manutenção
- Sempre regenerar documentação após mudanças
- Verificar consistência entre código e documentação
- Testar endpoints usando a interface Swagger
- Manter exemplos atualizados e realistas